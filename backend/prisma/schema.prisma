generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  githubId          String?       @unique
  githubUsername    String?
  githubAccessToken String?
  displayName       String?
  bio               String?
  avatarUrl         String?
  createdAt         DateTime      @default(now())
  projects          Project[]
  settings          UserSettings?
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String
  gitUrl         String        @unique
  language       String
  status         String        @default("Analyzing")
  analysisStage  String?       @default("cloning")
  userId         Int
  createdAt      DateTime      @default(now())
  fileAsts       FileAst[]
  issues         Issue[]
  user           User          @relation(fields: [userId], references: [id])
  files          ProjectFile[]
}

model Issue {
  id                     Int                     @id @default(autoincrement())
  projectId              Int
  filePath               String
  functionName           String?
  issueType              String
  metadata               Json?
  codeBlock              String
  status                 String                  @default("Pending")
  createdAt              DateTime                @default(now())
  className              String?
  confidence             Int                     @default(75)
  description            String?
  duplicateGroupId       String?
  lineEnd                Int?
  lineStart              Int?
  recommendation         String?
  severity               String                  @default("Medium")
  project                Project                 @relation(fields: [projectId], references: [id])
  refactoringSuggestions RefactoringSuggestion[]

  @@index([projectId])
  @@index([issueType])
  @@index([severity])
  @@index([duplicateGroupId])
}

model RefactoringSuggestion {
  id               Int      @id @default(autoincrement())
  issueId          Int
  originalCode     String
  refactoredCode   String
  explanation      String
  confidence       Int      @default(75)
  changes          Json
  status           String   @default("pending")
  // RefactoringMirror validation fields
  isVerified       Boolean  @default(false)
  verificationBadge String  @default("failed")
  validationLayers Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  issue            Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([status])
  @@index([isVerified])
}

model FileAst {
  id        Int      @id @default(autoincrement())
  projectId Int
  filePath  String
  language  String
  astFormat String
  ast       String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, filePath])
  @@index([projectId])
}

model ProjectFile {
  id        Int      @id @default(autoincrement())
  projectId Int
  filePath  String
  ext       String
  supported Boolean  @default(false)
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, filePath])
  @@index([projectId])
}

model UserSettings {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  autoAnalysis            Boolean  @default(true)
  showComplexityWarnings  Boolean  @default(true)
  complexityThreshold     Int      @default(3)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
